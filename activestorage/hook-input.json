{"session_id":"fdcba714-acab-4ca0-b528-aafcab4b8b66","transcript_path":"/Users/richard/.claude/projects/-Users-richard-git-rails-activestorage/fdcba714-acab-4ca0-b528-aafcab4b8b66.jsonl","cwd":"/Users/richard/git/rails/activestorage","hook_event_name":"PostToolUse","tool_name":"Edit","tool_input":{"file_path":"/Users/richard/git/rails/activestorage/app/javascript/activestorage/direct_upload_controller.js","old_string":"    this.useMultipart = this.input.getAttribute(\"multipart_upload\") === \"true\"","new_string":"    this.useMultipart = this.input.dataset.multipartUpload === \"true\""},"tool_response":{"filePath":"/Users/richard/git/rails/activestorage/app/javascript/activestorage/direct_upload_controller.js","oldString":"    this.useMultipart = this.input.getAttribute(\"multipart_upload\") === \"true\"","newString":"    this.useMultipart = this.input.dataset.multipartUpload === \"true\"","originalFile":"import { DirectUpload } from \"./direct_upload\"\nimport { dispatchEvent } from \"./helpers\"\n\nexport class DirectUploadController {\n  constructor(input, file) {\n    this.input = input\n    this.file = file\n    this.useMultipart = this.input.getAttribute(\"multipart_upload\") === \"true\"\n    this.directUpload = new DirectUpload(this.file, this.url, this, {}, this.useMultipart)\n    this.dispatch(\"initialize\")\n  }\n\n  start(callback) {\n    const hiddenInput = document.createElement(\"input\")\n    hiddenInput.type = \"hidden\"\n    hiddenInput.name = this.input.name\n    this.input.insertAdjacentElement(\"beforebegin\", hiddenInput)\n\n    this.dispatch(\"start\")\n\n    this.directUpload.create((error, attributes) => {\n      if (error) {\n        hiddenInput.parentNode.removeChild(hiddenInput)\n        this.dispatchError(error)\n      } else {\n        hiddenInput.value = attributes.signed_id\n      }\n\n      this.dispatch(\"end\")\n      callback(error)\n    })\n  }\n\n  uploadRequestDidProgress(event) {\n    // Scale upload progress to 0-90% range\n    const progress = (event.loaded / event.total) * 90\n    if (progress) {\n      this.dispatch(\"progress\", { progress })\n    }\n  }\n\n  get url() {\n    return this.input.getAttribute(\"data-direct-upload-url\")\n  }\n\n  dispatch(name, detail = {}) {\n    detail.file = this.file\n    detail.id = this.directUpload.id\n    return dispatchEvent(this.input, `direct-upload:${name}`, { detail })\n  }\n\n  dispatchError(error) {\n    const event = this.dispatch(\"error\", { error })\n    if (!event.defaultPrevented) {\n      alert(error)\n    }\n  }\n\n  // DirectUpload delegate\n\n  directUploadWillCreateBlobWithXHR(xhr) {\n    this.dispatch(\"before-blob-request\", { xhr })\n  }\n\n  directUploadWillStoreFileWithXHR(xhr) {\n    this.dispatch(\"before-storage-request\", { xhr })\n    xhr.upload.addEventListener(\"progress\", event => this.uploadRequestDidProgress(event))\n\n    // Start simulating progress after upload completes\n    xhr.upload.addEventListener(\"loadend\", () => {\n      this.simulateResponseProgress(xhr)\n    })\n  }\n\n  simulateResponseProgress(xhr) {\n    let progress = 90\n    const startTime = Date.now()\n\n    const updateProgress = () => {\n      // Simulate progress from 90% to 99% over estimated time\n      const elapsed = Date.now() - startTime\n      const estimatedResponseTime = this.estimateResponseTime()\n      const responseProgress = Math.min(elapsed / estimatedResponseTime, 1)\n      progress = 90 + (responseProgress * 9) // 90% to 99%\n\n      this.dispatch(\"progress\", { progress })\n\n      // Continue until response arrives or we hit 99%\n      if (xhr.readyState !== XMLHttpRequest.DONE && progress < 99) {\n        requestAnimationFrame(updateProgress)\n      }\n    }\n\n    // Stop simulation when response arrives\n    xhr.addEventListener(\"loadend\", () => {\n      this.dispatch(\"progress\", { progress: 100 })\n    })\n\n    requestAnimationFrame(updateProgress)\n  }\n\n  estimateResponseTime() {\n    // Base estimate: 1 second for small files, scaling up for larger files\n    const fileSize = this.file.size\n    const MB = 1024 * 1024\n\n    if (fileSize < MB) {\n      return 1000 // 1 second for files under 1MB\n    } else if (fileSize < 10 * MB) {\n      return 2000 // 2 seconds for files 1-10MB\n    } else {\n      return 3000 + (fileSize / MB * 50) // 3+ seconds for larger files\n    }\n  }\n}\n","structuredPatch":[{"oldStart":5,"oldLines":7,"newStart":5,"newLines":7,"lines":["   constructor(input, file) {","     this.input = input","     this.file = file","-    this.useMultipart = this.input.getAttribute(\"multipart_upload\") === \"true\"","+    this.useMultipart = this.input.dataset.multipartUpload === \"true\"","     this.directUpload = new DirectUpload(this.file, this.url, this, {}, this.useMultipart)","     this.dispatch(\"initialize\")","   }"]}],"userModified":false,"replaceAll":false}}